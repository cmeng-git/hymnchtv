apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdk = rootProject.compileSdk
    buildToolsVersion = rootProject.buildTools

    defaultConfig {
        namespace = 'org.cog.hymnchtv'
        applicationId = 'org.cog.hymnchtv'

        // End digit - change to force update with same version number
        versionCode 207000
        versionName "2.7.0"

        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.compileSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    externalNativeBuild {
        ndkBuild {
            path = 'src/main/jni/Android.mk'
        }
    }
    ndkVersion = '28.1.13356709'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable = true
            minifyEnabled = false
        }
    }

    File cfgFile = project.rootProject.file("settings.signing")
    if (cfgFile != null && cfgFile.exists()) {
        println "### Found settings.signing to prepare signingConfig for release signing"
        signingConfigs {
            release {
                Properties config = new Properties()
                config.load(new FileInputStream(cfgFile))

                storeFile file(config.getProperty('keystore'))
                File propsFile = file(config.getProperty('secure_properties'))
                if (propsFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(propsFile))
                    storePassword props.getProperty('key.store.password')
                    keyAlias props.getProperty('key.store.alias')
                    keyPassword props.getProperty('key.alias.password')
                }
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }

    lint {
        abortOnError = false
        lintConfig = file('lint.xml')
        // disable 'MissingTranslation', 'InvalidPackage', 'MissingQuantity', 'AppCompatResource'
        disable 'NonConstantResourceId'
    }

    packagingOptions {
        resources {
            excludes += [
                    'META-INF/io.netty.versions.properties',
                    'META-INF/DEPENDENCIES',
                    'META-INF/INDEX.LIST',
                    'META-INF/package-info'
            ]
        }
    }
}

dependencies {
    implementation project(':android-youtube-player:core')

    implementation 'androidx.activity:activity-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.fragment:fragment-ktx:1.8.8'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0'

    implementation 'androidx.media3:media3-exoplayer:1.8.0'
    implementation 'androidx.media3:media3-ui:1.8.0'

    implementation('com.jakewharton.timber:timber:5.0.1') {
        transitive = false
    }

    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    implementation 'com.github.yalantis:ucrop:2.2.10'
    // implementation 'com.github.qichuan:android-opencc:1.2.0'

    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'
    // 1.16.1: Failed to transform commons-codec-1.16.1.jar
    implementation 'commons-codec:commons-codec:1.19.0'
    implementation 'commons-io:commons-io:2.20.0'

    // implementation 'com.google.android.play:core:1.10.3'
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'

    implementation 'jp.wasabeef:richeditor-android:2.0.0'
    // For toc pinyin generation.
    implementation 'net.duguying.pinyin:pinyin:0.0.1'
    implementation 'org.apache.commons:commons-text:1.14.0'
    implementation 'org.apache.httpcomponents:httpcore:4.4.16'

    implementation 'org.jetbrains:annotations:26.0.2'
    implementation 'org.jsoup:jsoup:1.21.1'
}

task initJniLibs(type: Exec) {
    workingDir "src/main/jni/"
    executable './init_libopencc.sh'
}

task updateVersionFile(type: Copy) {
    def description = '<!-- Generate version.properties file -->'

    // Media url record import version; the value must be increased if there is an update to url_import file,
    // even for new apk release. To allow existing installed hymnchtv version app to update url import,
    // increase this value and git check in both the version.properties and new url_import file.
    def versionImport = 105
    def versionName = android.defaultConfig.versionName
    def versionCode = android.defaultConfig.versionCode
    def date = new Date()
    // ******************************************
    println "*** " + description
    println "# Date: " + date
    println "# last_version = " + versionName
    println "# last_version_code = " + versionCode
    println "# version_import = " + versionImport

    outputs.upToDateWhen {
        false
    }
    from('./version.properties') {
        // Substitute property tokens in files
        expand(DATE: date, BUILD_VERSION: versionName, BUILD_VERSION_CODE: versionCode, VERSION_IMPORT: versionImport)
    }
    into 'release'
}

// Uncomment below lines if you want to show all deprecated warnings
tasks.withType(JavaCompile) {
    // options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

tasks.getByName("build") {
    dependsOn(updateVersionFile)
}
